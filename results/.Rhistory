structure(1:8, dim = 2:4)
structure(1:6, dim = 2:12)
structure(1:8, dim = 2:4)
structure(1:8, dim = 2:3)
?dim
install.packages("/Users/annacalderon/Desktop/gENM/data/grainscape_0.3.tar.gz")
??structure
?structure
structure(1:6, dim = 2:3)
structure(1:10, my_attribute = "This is a vector")
x <- c("green","red","blue")
structure(x)
y<-c(1,2,3,4,5,6,7,8,9,10)
structure(y)
structure(x,y)
x <- c("green","red","blue", "Yellow", "purple", "yellowgreen", "pink", "aliceblue", "turquoise", "magenta")
structure(x,y)
structure(x)
y<-c(1:10)
structure(y)
y<-c(1:10, dim=2:5)
structure(y)
?structure
structure(1:10, dim=2:5)
structure(1:10, dim=2:5)
y
y<-c(1:10)
structure(y)
y
structure(Apicea)
?structure
str(Apicea)
structure(Apicea)
head(Apicea)
tail(Apicea)
?str
str(Apicea)
install.packages("gdistance")
library("gdistance")
set.seed(123)
r <- raster(ncol=3,nrow=3)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
install.packages("gdistance")
library("gdistance")
set.seed(123)
r <- raster(ncol=4,nrow=4)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
install.packages("gdistance")
#install.packages("gdistance")
#library("gdistance")
set.seed(123)
r <- raster(ncol=4,nrow=4)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
#install.packages("gdistance")
#library("gdistance")
set.seed(132)
r <- raster(ncol=4,nrow=4)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
#install.packages("gdistance")
#library("gdistance")
set.seed(123)
r <- raster(ncol=4,nrow=4)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
R> r[] <- 1
R> tr1 <- transition(r, transitionFunction=mean, directions=8)
r[] <- 1
tr1 <- transition(r, transitionFunction=mean, directions=8)
tr1
plot(tr1)
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
r[] <- runif(9)
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r, ncf, 4, symm=FALSE)
tr2
tr3 <- tr1*tr2
tr3 <- tr1+tr2
tr3 <- tr1*3
tr3 <- sqrt(tr1)
tr3[cbind(1:9, 1:9)] <- tr2[cbind(1:9, 1:9)]
tr3[1:9, 1:9] <- tr2[1:9, 1:9]
tr3[1:5, 1:5]
image(transitionMatrix(tr1))
r <- raster(ncol=3,nrow=3
r <- raster(ncol=3,nrow=3)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
r <- raster(ncol=3,nrow=3)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
#4. Transition Classes
r[] <- 1
tr1 <- transition(r, transitionFunction=mean, directions=8)
tr1
plot(tr1)
plot(r)
r[]
set.seed(123)
r <- raster(ncol=3,nrow=3)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
tr1 <- transition(r, transitionFunction=mean, directions=8)
tr1
plot(tr1)
transition
1:ncell(r)
r <- raster(ncol=3,nrow=3)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
r[] <- 1:ncell(r)
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
r[]
r <- raster(ncol=3,nrow=3)
ncell(r)
r[]
r <- raster(ncol=3,nrow=3)
r[]
r[] <- runif(9)
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r, ncf, 4, symm=FALSE)
tr2
tr3 <- tr1*tr2
tr3 <- tr1+tr2
tr3 <- tr1*3
tr3 <- sqrt(tr1)
tr3[cbind(1:9, 1:9)] <- tr2[cbind(1:9, 1:9)]
tr3[1:9, 1:9] <- tr2[1:9, 1:9]
tr3[1:5, 1:5]
image(transitionMatrix(tr1))
source('~/Desktop/gENM/src/gdistance.R')
source('~/Desktop/gENM/src/gdistance.R')
#install.packages("gdistance")
#library("gdistance")
set.seed(123)
r <- raster(ncol=3,nrow=3)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
#4. Transition Classes
r[] <- 1
tr1 <- transition(r, transitionFunction=mean, directions=8)
tr1
#Creating an Asymmetric Matrix
r[] <- runif(9)
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r, ncf, 4, symm=FALSE)
tr2
#The class dgCMatrix holds an asymmetric matrix.
tr3 <- tr1*tr2
tr3 <- tr1+tr2
tr3 <- tr1*3
tr3 <- sqrt(tr1)
tr3[cbind(1:9, 1:9)] <- tr2[cbind(1:9, 1:9)]
tr3[1:9, 1:9] <- tr2[1:9, 1:9]
tr3[1:5, 1:5]
image(transitionMatrix(tr1))
#First, we read in the altitude data for the volcano.
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
?volcano
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
?transition
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed
slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
?speed[adjacent]
?adjacent
Conductance <- geoCorrection(speed)
?geoCorrection
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",legend.lab="Altitude (masl)")
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",legend.lab="Altitude (masl)", xlim = c(2667400, 2668000))
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",legend.lab="Altitude (masl)", xlim = c(2667400, 2668000))
Europe <- raster(system.file("external/Europe.grd", package="gdistance"))
Europe[is.na(Europe)] <- 0
data(genDist)
data(popCoord)
pC <- as.matrix(popCoord[c("x","y")])
geoDist <- pointDistance(pC, longlat=TRUE)
geoDist <- as.dist(geoDist)
Europe <- aggregate(Europe,3)
tr <- transition(Europe, mean, directions=8)
trC <- geoCorrection(tr, "c", scl=TRUE)
trR <- geoCorrection(tr, "r", scl=TRUE)
cosDist <- costDistance(trC,pC)
resDist <- commuteDistance(trR, pC)
cor(genDist,geoDist)
cor(genDist,cosDist)
cor(genDist,cosDist)
cor(genDist,resDist)
origin <- unlist(popCoord[22,c("x","y")])
pI <- pathInc(trC, origin=origin, from=pC,functions=list(overlap))
cor(genDist,pI[[1]])
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
#finding the slope
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope â‰  0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
#defining two points on the graph
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",legend.lab="Altitude (masl)", xlim = c(2667400, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
pdf("../results/maptest.pdf")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",legend.lab="Altitude (masl)", xlim = c(2667400, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
dev.off()
system("open ../results/maptest.pdf")
getwd()
dir('..')
dir('.')
setwd('~/gENM')
pdf("../results/maptest.pdf")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",legend.lab="Altitude (masl)", xlim = c(2667400, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
dev.off()
system("open ../results/maptest.pdf")
getwd()
setwd('~/Desktop/gENM/results/)
)
setwd('~/Desktop/gENM/results/')
pdf("../results/maptest.pdf")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",legend.lab="Altitude (masl)", xlim = c(2667400, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
dev.off()
system("open ../results/maptest.pdf")
pdf("../results/maptest.pdf")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
dev.off()
pdf("../results/maptest.pdf")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
dev.off()
system("open ../results/maptest.pdf")
pdf("../results/maptest.pdf")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667600, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
dev.off()
system("open ../results/maptest.pdf")
pdf("../results/maptest.pdf")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
dev.off()
system("open ../results/maptest.pdf")
#First, we read in the altitude data for the volcano.
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
#finding the slope
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope â‰  0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
#defining two points on the graph
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
Conductance
Europe <- raster(system.file("external/Europe.grd", package="gdistance"))
Europe[is.na(Europe)] <- 0
data(genDist)
data(popCoord)
pC <- as.matrix(popCoord[c("x","y")])
geoDist <- pointDistance(pC, longlat=TRUE)
geoDist <- as.dist(geoDist)
Europe <- aggregate(Europe,3)
tr <- transition(Europe, mean, directions=8)
trC <- geoCorrection(tr, "c", scl=TRUE)
trR <- geoCorrection(tr, "r", scl=TRUE)
cosDist <- costDistance(trC,pC)
resDist <- commuteDistance(trR, pC)
cor(genDist,geoDist)
cor(genDist,cosDist)
cor(genDist,resDist)
origin <- unlist(popCoord[22,c("x","y")])
pI <- pathInc(trC, origin=origin, from=pC,functions=list(overlap))
cor(genDist,pI[[1]])
geoCorrection(speed)
dgCMatrix
?`dgCMatrix-class`
image(speed)
image(transitionMatrix(Conductance))
Conductance <- geoCorrection(speed)
image(transitionMatrix(Conductance))
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
#finding the slope
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope â‰  0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
image(transitionMatrix(Conductance))
image(transitionMatrix(AtoB))
Conductance[1:5, 1:5]
Conductance[1:1000, 1:5000]
Conductance[1:10, 1:50]
Conductance[1:3, 1:3]
plot(Conductance, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
plot(speed, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
plot(geoCorrection(speed), main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
#finding the slope
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope â‰  0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
#defining two points on the graph
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
image(Conductance)
hd
hd[1:5, 1:5]
image(transitionMatrix(hd))
image(transitionMatrix(slope))
image(transitionMatrix(speed))
image(transitionMatrix(slope))
image(transitionMatrix(speed[adj]))
image(transitionMatrix(Conductance))
r <- raster(system.file("external/maungawhau.grd", package="gdistance",ncol=3,nrow=3))
r <- raster(system.file("external/maungawhau.grd", package="gdistance")
image(transitionMatrix(tr1))
image(transitionMatrix(tr1))
image(transitionMatrix(geoCorrection(hd)))
x <- geoCorrection(speed, scl=FALSE)
#install.packages("gdistance")
#library("gdistance")
set.seed(123)
r <- raster(ncol=3,nrow=3)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
#4. Transition Classes
r[] <- 1
tr1 <- transition(r, transitionFunction=mean, directions=8)
tr1
#Creating an Asymmetric Matrix
r[] <- runif(9)
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r, ncf, 4, symm=FALSE)
tr2
#The class dgCMatrix holds an asymmetric matrix.
tr3 <- tr1*tr2
tr3 <- tr1+tr2
tr3 <- tr1*3
tr3 <- sqrt(tr1)
tr3[cbind(1:9, 1:9)] <- tr2[cbind(1:9, 1:9)]
tr3[1:9, 1:9] <- tr2[1:9, 1:9]
tr3[1:5, 1:5]
image(transitionMatrix(tr1))
############  Hiking around Maunga Whau ##############
#First, we read in the altitude data for the volcano.
r <- raster(system.file("external/maungawhau.grd", package="gdistance")
#finding the slope
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope â‰  0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
#defining two points on the graph
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
################ Geographical Genetics #########################
Europe <- raster(system.file("external/Europe.grd", package="gdistance"))
Europe[is.na(Europe)] <- 0
data(genDist)
data(popCoord)
pC <- as.matrix(popCoord[c("x","y")])
geoDist <- pointDistance(pC, longlat=TRUE)
geoDist <- as.dist(geoDist)
Europe <- aggregate(Europe,3)
tr <- transition(Europe, mean, directions=8)
trC <- geoCorrection(tr, "c", scl=TRUE)
trR <- geoCorrection(tr, "r", scl=TRUE)
cosDist <- costDistance(trC,pC)
resDist <- commuteDistance(trR, pC)
cor(genDist,geoDist)
cor(genDist,cosDist)
cor(genDist,resDist)
origin <- unlist(popCoord[22,c("x","y")])
pI <- pathInc(trC, origin=origin, from=pC,functions=list(overlap))
cor(genDist,pI[[1]])
r <- raster(system.file("external/maungawhau.grd", package="gdistance")
#finding the slope
r <- raster(system.file("external/maungawhau.grd", package="gdistance")
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
CO2
Conductance
commuteDistance(Conductance, sP)
sP <- cbind(c(2667670, 6479000), c(2667800, 6479400))
commuteDistance(Conductance, sP)
costDistance(Conductance, sP)
Conductance
tr3[1:3, 1:3]
Conductance[1:3, 1:3]
Conductance[1:3, 1:3]
image(Conductance)
image(Conductance[1:3, 1:3])
plot(raster(Conductance[1:3, 1:3]), main="raster(Conductance)", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
plot((Conductance[1:3, 1:3]), main="raster(Conductance)", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
Conductance[1:3, 1:3]
image(Conductance[1:3, 1:3])
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
Conductance[1:3, 1:3]
